% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/walk-ast.R
\name{ast}
\alias{ast}
\alias{is_visitor}
\alias{make_visitor}
\alias{walk_ast}
\title{walk ast}
\usage{
walk_ast(expr, visitor = make_visitor())

make_visitor(leaf = identity, call = identity, hd = identity,
  tl = identity, initial = identity, final = identity, ...)

is_visitor(visitor)
}
\arguments{
\item{expr}{a call object}

\item{visitor}{visitor class created by make_visitor()}

\item{leaf}{a function that manipulates an atomic or a symbol object}

\item{call}{a function that manipulates a call object}

\item{hd}{a function that manipulates a function object}

\item{tl}{a function that manipulates parameters of a call object}

\item{initial}{a function that manipulates expr before running AST}

\item{final}{a function that manipulates expr after running AST}

\item{...}{aribtrary functions or variables}
}
\description{
walk ast
}
\examples{
walk_ast(quote(x + y * z)) # default returns the initial argument itself
walk_ast(quote(x + y * z), show_tree())
walk_ast(quote(x + y * z), make_visitor(call = as.list, final = str)) # the same as above

time2_leaf <- make_visitor(
  leaf = function(x) if (is.numeric(x)) x * 2 else x
)
walk_ast(quote(1+2*3), time2_leaf)

add_leaf <-
make_visitor(
  leaf = function(x) {if (is.numeric(x)) val <<- val + x},
  initial = function(x) {val <<- 0; x}, # need to initialize
  final = function(`_`) val,
  val = 0
)

count_leaf <-
  make_visitor(
    leaf = function(`_`) v <<- v + 1,
    initial = function(x) {v <<- 0; x},
    final = function(`_`) v,
    v = 0
  )
walk_ast(quote(1 + 2 * 3), add_leaf)
walk_ast(quote(1 + 2 * 3), count_leaf)
}

